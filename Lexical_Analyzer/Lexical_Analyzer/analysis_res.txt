#----#
include----include
<STRING>----"analysis.h"
void----void
 ---- 
<ID>----analysis
::----::
<ID>----getStrBuffer
(----(
)----)
{----{
char----char
 ---- 
<ID>----c
 ---- 
=----=
<Char>----'\0'
;----;
int----int
 ---- 
<ID>----buffer_flag
 ---- 
=----=
 ---- 
<INT>----0
;----;
while----while
(----(
<INT>----1
)----)
{----{
<ID>----c
 ---- 
=----=
 ---- 
<ID>----fgetc
(----(
<ID>----fin
)----)
;----;
if----if
(----(
<ID>----c
 ---- 
==----==
 ---- 
<ID>----EOF
)----)
{----{
<ID>----deleNotes
(----(
)----)
;----;
<ID>----deleSpaces
(----(
)----)
;----;
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
 ---- 
>---->
 ---- 
<INT>----0
)----)
{----{
<ID>----strcpy
(----(
<ID>----buffer_end
.----.
<ID>----buffer
,----,
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
)----)
;----;
<ID>----buffer_end
.----.
<ID>----count
 ---- 
=----=
 ---- 
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----fprintf
(----(
<ID>----fout_pre
,----,
<STRING>----"%s\n"
,----,
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
)----)
;----;
<ID>----spearateStates
(----(
)----)
;----;
}----}
break----break
;----;
}----}
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
 ---- 
==----==
 ---- 
<ID>----BUFFER_SIZE
 ---- 
------
 ---- 
<INT>----2
)----)
{----{
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
]----]
=----=
 ---- 
<ID>----c
;----;
int----int
 ---- 
<ID>----i
;----;
for----for
(----(
<ID>----i
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----i
 ---- 
<----<
 ---- 
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
;----;
<ID>----i
++----++
)----)
{----{
if----if
(----(
<ID>----isDelimiter
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
)----)
)----)
{----{
int----int
 ---- 
<ID>----j
;----;
int----int
 ---- 
<ID>----k
;----;
for----for
(----(
<ID>----j
 ---- 
=----=
 ---- 
<INT>----0
,----,
<ID>----k
 ---- 
=----=
 ---- 
<ID>----i
 ---- 
+----+
 ---- 
<INT>----1
;----;
<ID>----k
 ---- 
<=----<=
 ---- 
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
;----;
<ID>----k
++----++
,----,
<ID>----j
++----++
)----)
{----{
<ID>----buffer_read
[----[
<INT>----1
 ---- 
------
 ---- 
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
=----=
 ---- 
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----k
]----]
;----;
}----}
<ID>----buffer_read
[----[
<INT>----1
 ---- 
------
 ---- 
<ID>----buffer_choose
]----]
.----.
<ID>----count
 ---- 
=----=
 ---- 
<ID>----j
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
 ---- 
=----=
 ---- 
<ID>----i
;----;
<ID>----buffer_read
[----[
<INT>----1
 ---- 
------
 ---- 
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
=----=
<Char>----'\0'
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
 ---- 
+----+
 ---- 
<INT>----1
]----]
=----=
<Char>----'\0'
;----;
<ID>----buffer_flag
 ---- 
=----=
 ---- 
<INT>----1
;----;
break----break
;----;
}----}
}----}
}----}
else----else
 ---- 
if----if
(----(
<ID>----c
 ---- 
==----==
<Char>----'\n'
<WRONG>----&&!
<ID>----note_flag
)----)
{----{
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
}----}
else----else
 ---- 
if----if
(----(
<ID>----c
 ---- 
==----==
<Char>----'\n'
)----)
{----{
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
}----}
else----else
{----{
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----c
;----;
continue----continue
;----;
}----}
<ID>----deleNotes
(----(
)----)
;----;
<ID>----deleSpaces
(----(
)----)
;----;
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
 ---- 
>---->
 ---- 
<INT>----0
)----)
{----{
<ID>----strcpy
(----(
<ID>----buffer_end
.----.
<ID>----buffer
,----,
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
)----)
;----;
<ID>----buffer_end
.----.
<ID>----count
 ---- 
=----=
 ---- 
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----fprintf
(----(
<ID>----fout_pre
,----,
<STRING>----"%s\n"
,----,
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
)----)
;----;
<ID>----spearateStates
(----(
)----)
;----;
}----}
if----if
(----(
<ID>----buffer_flag
 ---- 
==----==
 ---- 
<INT>----1
)----)
{----{
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----buffer_choose
 ---- 
=----=
 ---- 
<INT>----1
 ---- 
------
 ---- 
<ID>----buffer_choose
;----;
<ID>----buffer_flag
 ---- 
=----=
 ---- 
<INT>----0
;----;
}----}
}----}
<ID>----cout
 ---- 
<<----<<
<STRING>----"The result of lexical analysis has been saved in the res_out.txt file."
<<----<<
 ---- 
<ID>----endl
;----;
<ID>----cout
 ---- 
<<----<<
<STRING>----"The pre-processed code has been saved in the pre-processed_code.txt file."
<<----<<
 ---- 
<ID>----endl
;----;
<ID>----cout
 ---- 
<<----<<
<STRING>----"The word_lable has been saved in the word-lable.txt file."
<<----<<
 ---- 
<ID>----endl
;----;
}----}
void----void
 ---- 
<ID>----analysis
::----::
<ID>----deleNotes
(----(
)----)
{----{
char----char
 ---- 
<ID>----note
[----[
<ID>----BUFFER_SIZE
]----]
;----;
char----char
 ---- 
<ID>----note_count
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----bool
 ---- 
<ID>----flag_qoute
 ---- 
=----=
 ---- 
<INT>----0
;----;
for----for
(----(
int----int
 ---- 
<ID>----i
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
!=----!=
<Char>----'\0'
;----;
<ID>----i
++----++
)----)
{----{
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
==----==
<Char>----'"'
)----)
{----{
<ID>----flag_qoute
 ---- 
=----=
 ---- 
<INT>----1
 ---- 
------
 ---- 
<ID>----flag_qoute
;----;
if----if
(----(
<ID>----note_flag
 ---- 
!=----!=
 ---- 
<INT>----1
)----)
continue----continue
;----;
}----}
if----if
(----(
<ID>----flag_qoute
 ---- 
==----==
 ---- 
<INT>----1
)----)
if----if
(----(
<ID>----note_flag
 ---- 
!=----!=
 ---- 
<INT>----1
)----)
continue----continue
;----;
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
==----==
<Char>----'/'
||----||
<ID>----note_flag
 ---- 
==----==
 ---- 
<INT>----1
)----)
{----{
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
 ---- 
+----+
 ---- 
<INT>----1
]----]
==----==
<Char>----'\0'
)----)
{----{
continue----continue
;----;
}----}
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
 ---- 
+----+
 ---- 
<INT>----1
]----]
==----==
<Char>----'/'
<WRONG>----&&!
<ID>----note_flag
)----)
{----{
int----int
 ---- 
<ID>----j
;----;
for----for
(----(
<ID>----j
 ---- 
=----=
 ---- 
<ID>----i
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
!=----!=
<Char>----'\0'
;----;
<ID>----j
++----++
)----)
{----{
<ID>----note
[----[
<ID>----note_count
++----++
]----]
=----=
 ---- 
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
=----=
<Char>----'\0'
;----;
}----}
<ID>----note
[----[
<ID>----note_count
]----]
=----=
<Char>----'\0'
;----;
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[注释]----[ %s ]\n"
,----,
<ID>----note
)----)
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
 ---- 
-=-----=
 ---- 
<ID>----note_count
;----;
<ID>----note_count
 ---- 
=----=
 ---- 
<INT>----0
;----;
break----break
;----;
}----}
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
 ---- 
+----+
 ---- 
<INT>----1
]----]
==----==
<Char>----'*'
||----||
<ID>----note_flag
 ---- 
==----==
 ---- 
<INT>----1
)----)
{----{
<ID>----note_flag
 ---- 
=----=
 ---- 
<INT>----1
;----;
int----int
 ---- 
<ID>----j
;----;
for----for
(----(
<ID>----j
 ---- 
=----=
 ---- 
<ID>----i
 ---- 
+----+
 ---- 
<INT>----2
 ---- 
*----*
(----(
<INT>----1
 ---- 
------
 ---- 
<ID>----note_flag
)----)
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
!=----!=
<Char>----'\0'
;----;
<ID>----j
++----++
)----)
{----{
<ID>----note
[----[
<ID>----note_count
++----++
]----]
=----=
 ---- 
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
;----;
if----if
(----(
!----!
<ID>----flag_qoute
&&----&&
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
==----==
<Char>----'*'
&&----&&
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
 ---- 
+----+
 ---- 
<INT>----1
]----]
==----==
<Char>----'/'
)----)
{----{
<ID>----note_flag
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----note
[----[
<ID>----note_count
++----++
]----]
=----=
<Char>----'/'
;----;
<ID>----note
[----[
<ID>----note_count
]----]
=----=
<Char>----'\0'
;----;
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[注释]----[ %s ]\n"
,----,
<ID>----note
)----)
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
 ---- 
-=-----=
 ---- 
<ID>----note_count
;----;
<ID>----note_count
 ---- 
=----=
 ---- 
<INT>----0
;----;
break----break
;----;
}----}
}----}
if----if
(----(
<ID>----note_flag
 ---- 
==----==
 ---- 
<INT>----0
)----)
<ID>----j
 ---- 
=----=
 ---- 
<ID>----j
 ---- 
+----+
 ---- 
<INT>----2
;----;
for----for
(----(
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
!=----!=
<Char>----'\0'
;----;
<ID>----j
++----++
,----,
<ID>----i
++----++
)----)
{----{
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
==----==
<Char>----'\n'
)----)
{----{
<ID>----i
--------
;----;
continue----continue
;----;
}----}
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
=----=
 ---- 
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
;----;
}----}
if----if
(----(
<ID>----note_flag
)----)
{----{
<ID>----note
[----[
<ID>----note_count
]----]
=----=
<Char>----'\0'
;----;
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[注释]----[ %s ]\n"
,----,
<ID>----note
)----)
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
=----=
<Char>----'\0'
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----count
 ---- 
-=-----=
 ---- 
<ID>----note_count
;----;
break----break
;----;
}----}
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
=----=
<Char>----'\0'
;----;
}----}
}----}
}----}
}----}
void----void
 ---- 
<ID>----analysis
::----::
<ID>----deleSpaces
(----(
)----)
{----{
<ID>----bool
 ---- 
<ID>----flag1
 ---- 
=----=
 ---- 
<ID>----true
,----,
<ID>----flag2
 ---- 
=----=
 ---- 
<ID>----true
;----;
for----for
(----(
int----int
 ---- 
<ID>----i
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
!=----!=
<Char>----'\0'
;----;
<ID>----i
++----++
)----)
{----{
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
==----==
<Char>----'"'
)----)
<ID>----flag1
 ---- 
=----=
 ---- 
!----!
<ID>----flag1
;----;
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
==----==
<Char>----'\''
)----)
<ID>----flag2
 ---- 
=----=
 ---- 
!----!
<ID>----flag2
;----;
if----if
(----(
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
==----==
<Char>----' '
||----||
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
==----==
<Char>----'\t'
)----)
&&----&&
<ID>----flag1
&&----&&
<ID>----flag2
)----)
{----{
int----int
 ---- 
<ID>----j
 ---- 
=----=
 ---- 
<ID>----i
 ---- 
+----+
 ---- 
<INT>----1
;----;
for----for
(----(
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
!=----!=
<Char>----'\0'
&&----&&
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
==----==
<Char>----' '
||----||
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
==----==
<Char>----'\t'
)----)
;----;
<ID>----j
++----++
)----)
{----{
}----}
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
==----==
<Char>----'\0'
)----)
{----{
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
]----]
=----=
<Char>----'\0'
;----;
break----break
;----;
}----}
if----if
(----(
<ID>----i
 ---- 
==----==
 ---- 
<INT>----0
)----)
{----{
int----int
 ---- 
<ID>----k
 ---- 
=----=
 ---- 
<ID>----i
;----;
for----for
(----(
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
!=----!=
<Char>----'\0'
;----;
<ID>----j
++----++
,----,
<ID>----k
++----++
)----)
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----k
]----]
=----=
 ---- 
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----k
]----]
=----=
<Char>----'\0'
;----;
<ID>----i
--------
;----;
}----}
else----else
{----{
if----if
(----(
<ID>----j
 ---- 
------
 ---- 
<ID>----i
 ---- 
>=---->=
 ---- 
<INT>----2
)----)
{----{
int----int
 ---- 
<ID>----k
 ---- 
=----=
 ---- 
<ID>----i
 ---- 
+----+
 ---- 
<INT>----1
;----;
for----for
(----(
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
!=----!=
<Char>----'\0'
;----;
<ID>----j
++----++
,----,
<ID>----k
++----++
)----)
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----k
]----]
=----=
 ---- 
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----k
]----]
=----=
<Char>----'\0'
;----;
<ID>----j
 ---- 
=----=
 ---- 
<ID>----i
 ---- 
+----+
 ---- 
<INT>----1
;----;
}----}
if----if
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
!=----!=
<Char>----'\0'
&&----&&
(----(
(----(
<ID>----spaceCanDelete
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
)----)
||----||
(----(
<ID>----i
 ---- 
>---->
 ---- 
<INT>----0
&&----&&
<ID>----spaceCanDelete
(----(
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----i
 ---- 
------
 ---- 
<INT>----1
]----]
)----)
)----)
)----)
)----)
)----)
{----{
int----int
 ---- 
<ID>----k
 ---- 
=----=
 ---- 
<ID>----i
;----;
for----for
(----(
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
!=----!=
<Char>----'\0'
;----;
<ID>----j
++----++
,----,
<ID>----k
++----++
)----)
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----k
]----]
=----=
 ---- 
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----j
]----]
;----;
<ID>----buffer_read
[----[
<ID>----buffer_choose
]----]
.----.
<ID>----buffer
[----[
<ID>----k
]----]
=----=
<Char>----'\0'
;----;
<ID>----i
--------
;----;
}----}
}----}
}----}
}----}
}----}
void----void
 ---- 
<ID>----analysis
::----::
<ID>----spearateStates
(----(
)----)
{----{
char----char
 ---- 
<ID>----word
[----[
<ID>----BUFFER_SIZE
]----]
;----;
int----int
 ---- 
<ID>----count
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----bool
 ---- 
<ID>----finish
 ---- 
=----=
 ---- 
<ID>----false
;----;
int----int
 ---- 
<ID>----state
 ---- 
=----=
 ---- 
<INT>----0
;----;
for----for
(----(
int----int
 ---- 
<ID>----i
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----i
 ---- 
<=----<=
 ---- 
<ID>----buffer_end
.----.
<ID>----count
;----;
<ID>----i
++----++
)----)
{----{
switch----switch
(----(
<ID>----state
)----)
{----{
case----case
 ---- 
<INT>----0
:----:
switch----switch
(----(
<ID>----charKind
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
)----)
)----)
{----{
case----case
 ---- 
<INT>----1
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----1
;----;
break----break
;----;
case----case
 ---- 
<INT>----2
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----2
;----;
break----break
;----;
case----case
 ---- 
<INT>----3
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----3
;----;
break----break
;----;
case----case
 ---- 
<INT>----4
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----4
;----;
break----break
;----;
case----case
 ---- 
<INT>----5
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----5
;----;
break----break
;----;
case----case
 ---- 
<INT>----6
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----6
;----;
break----break
;----;
case----case
 ---- 
<INT>----7
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----7
;----;
break----break
;----;
case----case
 ---- 
<INT>----8
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----8
;----;
break----break
;----;
case----case
 ---- 
<INT>----10
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----10
;----;
break----break
;----;
default----default
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
break----break
;----;
}----}
break----break
;----;
case----case
 ---- 
<INT>----1
:----:
switch----switch
(----(
<ID>----charKind
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
)----)
)----)
{----{
case----case
 ---- 
<INT>----1
:----:
case----case
 ---- 
<INT>----2
:----:
case----case
 ---- 
<INT>----3
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
break----break
;----;
default----default
:----:
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----i
--------
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----1
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----9
;----;
}----}
break----break
;----;
case----case
 ---- 
<INT>----2
:----:
switch----switch
(----(
<ID>----charKind
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
)----)
)----)
{----{
case----case
 ---- 
<INT>----1
:----:
case----case
 ---- 
<INT>----2
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
break----break
;----;
case----case
 ---- 
<INT>----7
:----:
if----if
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
==----==
<Char>----'.'
)----)
{----{
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
break----break
;----;
}----}
else----else
{----{
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----i
--------
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----1
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----9
;----;
}----}
break----break
;----;
case----case
 ---- 
<INT>----8
:----:
if----if
(----(
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
==----==
<Char>----'+'
||----||
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
==----==
<Char>----'-'
)----)
&&----&&
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
 ---- 
------
 ---- 
<INT>----1
]----]
==----==
<Char>----'e'
||----||
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
 ---- 
------
 ---- 
<INT>----1
]----]
==----==
<Char>----'E'
)----)
)----)
{----{
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
break----break
;----;
}----}
else----else
{----{
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----i
--------
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----1
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----9
;----;
break----break
;----;
}----}
default----default
:----:
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----i
--------
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----1
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----9
;----;
break----break
;----;
}----}
break----break
;----;
case----case
 ---- 
<INT>----3
:----:
switch----switch
(----(
<ID>----charKind
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
)----)
)----)
{----{
case----case
 ---- 
<INT>----1
:----:
case----case
 ---- 
<INT>----2
:----:
case----case
 ---- 
<INT>----3
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
break----break
;----;
default----default
:----:
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----i
--------
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----1
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----9
;----;
break----break
;----;
}----}
break----break
;----;
case----case
 ---- 
<INT>----4
:----:
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----i
--------
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----1
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----9
;----;
break----break
;----;
case----case
 ---- 
<INT>----5
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
if----if
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
==----==
<Char>----'"'
)----)
{----{
if----if
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
 ---- 
------
 ---- 
<INT>----1
]----]
==----==
<Char>----'\\')
{----{
}----}
else----else
{----{
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----1
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----9
;----;
}----}
}----}
break----break
;----;
case----case
 ---- 
<INT>----6
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
if----if
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
==----==
<Char>----'\''
)----)
{----{
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----1
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----9
;----;
}----}
break----break
;----;
case----case
 ---- 
<INT>----7
:----:
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----i
--------
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----1
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----9
;----;
break----break
;----;
case----case
 ---- 
<INT>----8
:----:
switch----switch
(----(
<ID>----charKind
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
)----)
)----)
{----{
case----case
 ---- 
<INT>----8
:----:
case----case
 ---- 
<INT>----11
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
break----break
;----;
default----default
:----:
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----i
--------
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----1
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----9
;----;
break----break
;----;
}----}
break----break
;----;
case----case
 ---- 
<INT>----9
:----:
<ID>----state
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----count
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----i
--------
;----;
<ID>----kindJudge
(----(
<ID>----word
)----)
;----;
break----break
;----;
case----case
 ---- 
<INT>----10
:----:
switch----switch
(----(
<ID>----charKind
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
)----)
)----)
{----{
case----case
 ---- 
<INT>----10
:----:
<ID>----word
[----[
<ID>----count
++----++
]----]
=----=
 ---- 
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
]----]
;----;
break----break
;----;
default----default
:----:
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----i
--------
;----;
<ID>----finish
 ---- 
=----=
 ---- 
<INT>----1
;----;
<ID>----state
 ---- 
=----=
 ---- 
<INT>----9
;----;
break----break
;----;
}----}
break----break
;----;
default----default
:----:
break----break
;----;
}----}
if----if
(----(
<ID>----buffer_end
.----.
<ID>----buffer
[----[
<ID>----i
 ---- 
+----+
 ---- 
<INT>----1
]----]
==----==
<Char>----'\0'
)----)
{----{
<ID>----word
[----[
<ID>----count
]----]
=----=
<Char>----'\0'
;----;
<ID>----kindJudge
(----(
<ID>----word
)----)
;----;
break----break
;----;
}----}
}----}
}----}
void----void
 ---- 
<ID>----analysis
::----::
<ID>----kindJudge
(----(
char----char
*----*
 ---- 
<ID>----str
)----)
{----{
int----int
 ---- 
<ID>----kind
 ---- 
=----=
 ---- 
<INT>----0
;----;
if----if
(----(
<ID>----isKeyWord
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
{----{
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----KeyWord
;----;
}----}
else----else
 ---- 
if----if
(----(
<ID>----isSignWord
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----SignWord
;----;
else----else
 ---- 
if----if
(----(
<ID>----isInt
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----Integer
;----;
else----else
 ---- 
if----if
(----(
<ID>----isFloat
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----FloatPoint
;----;
else----else
 ---- 
if----if
(----(
<ID>----isMonocularOperator
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----MonocularOperator
;----;
else----else
 ---- 
if----if
(----(
<ID>----isBinocularOperator
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----BinocularOperator
;----;
else----else
 ---- 
if----if
(----(
<ID>----isDelimiter
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----Delimiter
;----;
else----else
 ---- 
if----if
(----(
<ID>----isBlank
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----Blank
;----;
else----else
 ---- 
if----if
(----(
<ID>----isSeparator
(----(
<ID>----str
[----[
<INT>----0
]----]
)----)
==----==
 ---- 
<INT>----1
&&----&&
<ID>----strlen
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----Separator
;----;
else----else
 ---- 
if----if
(----(
<ID>----isBracketsLeft
(----(
<ID>----str
[----[
<INT>----0
]----]
)----)
==----==
 ---- 
<INT>----1
&&----&&
<ID>----strlen
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----BracketsLeft
;----;
else----else
 ---- 
if----if
(----(
<ID>----isBracketsRight
(----(
<ID>----str
[----[
<INT>----0
]----]
)----)
==----==
 ---- 
<INT>----1
&&----&&
<ID>----strlen
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----BracketsRight
;----;
else----else
 ---- 
if----if
(----(
<ID>----isBracketsLeftBig
(----(
<ID>----str
[----[
<INT>----0
]----]
)----)
==----==
 ---- 
<INT>----1
&&----&&
<ID>----strlen
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----BracketsLeftBig
;----;
else----else
 ---- 
if----if
(----(
<ID>----isBracketsRightBig
(----(
<ID>----str
[----[
<INT>----0
]----]
)----)
==----==
 ---- 
<INT>----1
&&----&&
<ID>----strlen
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----BracketsRightBig
;----;
else----else
 ---- 
if----if
(----(
<ID>----isEnd
(----(
<ID>----str
[----[
<INT>----0
]----]
)----)
==----==
 ---- 
<INT>----1
&&----&&
<ID>----strlen
(----(
<ID>----str
)----)
==----==
 ---- 
<INT>----1
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----End
;----;
else----else
 ---- 
if----if
(----(
<ID>----isStr
(----(
<ID>----str
)----)
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----Str
;----;
else----else
 ---- 
if----if
(----(
<ID>----isChar
(----(
<ID>----str
)----)
)----)
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----Char
;----;
else----else
<ID>----kind
 ---- 
=----=
 ---- 
<ID>----WrongWord
;----;
<ID>----printResult
(----(
<ID>----kind
,----,
<ID>----str
,----,
<INT>----0
)----)
;----;
}----}
void----void
 ---- 
<ID>----analysis
::----::
<ID>----printResult
(----(
int----int
 ---- 
<ID>----kind
,----,
char----char
*----*
 ---- 
<ID>----str
,----,
int----int
 ---- 
<ID>----opt
)----)
{----{
if----if
(----(
<ID>----opt
 ---- 
==----==
 ---- 
<INT>----1
)----)
{----{
switch----switch
(----(
<ID>----kind
)----)
{----{
case----case
 ---- 
<ID>----KeyWord
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[关键字]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----SignWord
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[标识符]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Integer
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[整数]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----FloatPoint
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[浮点数]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----MonocularOperator
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[单目运算符]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----BinocularOperator
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[双目运算符]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Delimiter
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[界符]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----WrongWord
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[错误词]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Blank
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[空格]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Separator
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[分隔符]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsLeft
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[左括号]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsRight
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[右括号]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsLeftBig
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[左大括号]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsRightBig
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[右大括号]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----End
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[结束符]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Str
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[字符串]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Char
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[字符]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
default----default
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[其他]----[%s]\n"
,----,
<ID>----str
)----)
;----;
break----break
;----;
}----}
}----}
else----else
{----{
int----int
 ---- 
<ID>----WordKindCode
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----WordKindCode
 ---- 
=----=
 ---- 
<ID>----getWordKindCode
(----(
<ID>----kind
,----,
<ID>----str
)----)
;----;
switch----switch
(----(
<ID>----kind
)----)
{----{
case----case
 ---- 
<ID>----KeyWord
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[关键字]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----SignWord
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[标识符]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Integer
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[整数]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----FloatPoint
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[浮点数]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----MonocularOperator
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[单目运算符]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----BinocularOperator
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[双目运算符]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Delimiter
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[界符]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----WrongWord
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[错误词]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Blank
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[空格]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Separator
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[分隔符]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsLeft
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[左括号]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsRight
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[右括号]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsLeftBig
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[左大括号]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsRightBig
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[右大括号]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----End
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[结束符]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Str
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[字符串]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
case----case
 ---- 
<ID>----Char
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[字符]----[%d]----[%s]\n"
,----,
<ID>----WordKindCode
,----,
<ID>----str
)----)
;----;
break----break
;----;
default----default
:----:
<ID>----fprintf
(----(
<ID>----fout
,----,
<STRING>----"[其他]----[%s]\n"
,----,
<ID>----str
)----)
;----;
}----}
}----}
}----}
int----int
 ---- 
<ID>----analysis
::----::
<ID>----getWordKindCode
(----(
int----int
 ---- 
<ID>----kind
,----,
char----char
*----*
 ---- 
<ID>----str
)----)
{----{
int----int
 ---- 
<ID>----ret
 ---- 
=----=
 ---- 
<INT>----0
;----;
switch----switch
(----(
<ID>----kind
)----)
{----{
case----case
 ---- 
<ID>----KeyWord
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<ID>----str
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----SignWord
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----"signword"
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----Integer
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----"integer"
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----FloatPoint
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----"float"
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----MonocularOperator
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<ID>----str
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----BinocularOperator
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<ID>----str
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----Delimiter
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----";"
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----WrongWord
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----"wrongword"
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----Blank
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----"blank"
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----Separator
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----","
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsLeft
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----"("
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsRight
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----")"
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsLeftBig
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----"{"
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----BracketsRightBig
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----"}"
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----End
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----"#"
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----Str
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----"string"
]----]
;----;
break----break
;----;
case----case
 ---- 
<ID>----Char
:----:
<ID>----ret
 ---- 
=----=
 ---- 
<ID>----WordCode
[----[
<STRING>----"char"
]----]
;----;
break----break
;----;
default----default
:----:
<ID>----ret
 ---- 
=----=
 ---- 
------
<INT>----100
;----;
break----break
;----;
}----}
return----return
 ---- 
<ID>----ret
;----;
}----}
<ID>----analysis
::----::
<ID>----analysis
(----(
)----)
{----{
<ID>----buffer_choose
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----note_flag
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----fin
 ---- 
=----=
 ---- 
<ID>----fopen
(----(
<STRING>----"code_in.txt"
,----,
<STRING>----"r"
)----)
;----;
<ID>----fout
 ---- 
=----=
 ---- 
<ID>----fopen
(----(
<STRING>----"res_out.txt"
,----,
<STRING>----"w"
)----)
;----;
<ID>----fout_pre
 ---- 
=----=
 ---- 
<ID>----fopen
(----(
<STRING>----"pre-process_code.txt"
,----,
<STRING>----"w"
)----)
;----;
<ID>----fout_lable
 ---- 
=----=
 ---- 
<ID>----fopen
(----(
<STRING>----"word_lable.txt"
,----,
<STRING>----"w"
)----)
;----;
<ID>----const
 ---- 
int----int
 ---- 
<ID>----keyword_size
 ---- 
=----=
 ---- 
<INT>----24
;----;
<ID>----const
 ---- 
int----int
 ---- 
<ID>----monocular_operator_size
 ---- 
=----=
 ---- 
<INT>----13
;----;
<ID>----const
 ---- 
int----int
 ---- 
<ID>----binocular_operator_size
 ---- 
=----=
 ---- 
<INT>----14
;----;
int----int
 ---- 
<ID>----cnt
 ---- 
=----=
 ---- 
<INT>----0
;----;
for----for
(----(
int----int
 ---- 
<ID>----i
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----i
 ---- 
<----<
 ---- 
<ID>----keyword_size
;----;
<ID>----i
++----++
)----)
<ID>----WordCode
[----[
<ID>----keyword
[----[
<ID>----i
]----]
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
for----for
(----(
int----int
 ---- 
<ID>----i
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----i
 ---- 
<----<
 ---- 
<ID>----monocular_operator_size
;----;
<ID>----i
++----++
)----)
<ID>----WordCode
[----[
<ID>----monocular_operator
[----[
<ID>----i
]----]
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
for----for
(----(
int----int
 ---- 
<ID>----i
 ---- 
=----=
 ---- 
<INT>----0
;----;
<ID>----i
 ---- 
<----<
 ---- 
<ID>----binocular_operator_size
;----;
<ID>----i
++----++
)----)
<ID>----WordCode
[----[
<ID>----binocular_operator
[----[
<ID>----i
]----]
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----"signword"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----"wrongword"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----"blank"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----";"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----","
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----"("
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----")"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----"{"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----"}"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----"#"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----"string"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----"char"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----"integer"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----WordCode
[----[
<STRING>----"float"
]----]
=----=
 ---- 
++----++
<ID>----cnt
;----;
<ID>----map
<----<
<ID>----string
,----,
int----int
<WRONG>---->::
<ID>----iterator
 ---- 
<ID>----iter
;----;
<ID>----iter
 ---- 
=----=
 ---- 
<ID>----WordCode
.----.
<ID>----begin
(----(
)----)
;----;
while----while
(----(
<ID>----iter
 ---- 
!=----!=
 ---- 
<ID>----WordCode
.----.
<ID>----end
(----(
)----)
)----)
{----{
<ID>----fprintf
(----(
<ID>----fout_lable
,----,
<STRING>----"%s : %d\n"
,----,
<ID>----iter
->----->
<ID>----first
.----.
<ID>----c_str
(----(
)----)
,----,
<ID>----iter
->----->
<ID>----second
)----)
;----;
<ID>----iter
++----++
;----;
}----}
}----}
<ID>----analysis
::~----::~
<ID>----analysis
(----(
)----)
{----{
<ID>----fclose
(----(
<ID>----fin
)----)
;----;
<ID>----fclose
(----(
<ID>----fout
)----)
;----;
}----}
